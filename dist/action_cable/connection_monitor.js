"use strict";let AppState;Object.defineProperty(exports,"__esModule",{value:!0});try{const{AppState:t}=require("react-native");AppState=t}catch(t){AppState={currentState:"active",addEventListener:()=>({remove:()=>{}})}}const APP_STATE_ACTIVE="active";class ConnectionMonitor{constructor(t,n){this.reconnectAttempts=0,this.start=()=>{this.isRunning()||(this.startedAt=now(),delete this.stoppedAt,this.startPolling(),this.appStateEventListener=AppState.addEventListener("change",this.visibilityDidChange),this.log(`ConnectionMonitor started. pollInterval = ${this.getPollInterval()} ms`))},this.stop=()=>{var t;this.isRunning()&&(this.stoppedAt=now(),this.stopPolling(),null===(t=this.appStateEventListener)||void 0===t||t.remove(),this.log("ConnectionMonitor stopped"))},this.isRunning=()=>null!=this.startedAt&&null==this.stoppedAt,this.recordPing=()=>{this.pingedAt=now()},this.recordConnect=()=>{this.reconnectAttempts=0,this.recordPing(),delete this.disconnectedAt,this.log("ConnectionMonitor recorded connect")},this.recordDisconnect=()=>{this.disconnectedAt=now(),this.log("ConnectionMonitor recorded disconnect")},this.startPolling=()=>{this.stopPolling(),this.poll()},this.stopPolling=()=>{this.pollTimeout&&clearTimeout(this.pollTimeout)},this.poll=()=>{this.pollTimeout=setTimeout((()=>{this.reconnectIfStale(),this.poll()}),this.getPollInterval())},this.getPollInterval=()=>{const{min:t,max:n}=ConnectionMonitor.pollInterval,e=5*Math.log(this.reconnectAttempts+1);return Math.round(1e3*clamp(e,t,n))},this.reconnectIfStale=()=>{this.connectionIsStale()&&(this.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, pollInterval = ${this.getPollInterval()} ms, time disconnected = ${secondsSince(this.disconnectedAt)} s, stale threshold = ${ConnectionMonitor.staleThreshold} s`),this.reconnectAttempts++,this.disconnectedRecently()?this.log("ConnectionMonitor skipping reopening recent disconnect"):(this.log("ConnectionMonitor reopening"),this.connection.reopen()))},this.connectionIsStale=()=>{var t;return secondsSince(null!==(t=this.pingedAt)&&void 0!==t?t:this.startedAt)>ConnectionMonitor.staleThreshold},this.disconnectedRecently=()=>this.disconnectedAt&&secondsSince(this.disconnectedAt)<ConnectionMonitor.staleThreshold,this.visibilityDidChange=()=>{"active"===AppState.currentState&&setTimeout((()=>{!this.connectionIsStale()&&this.connection.isOpen()||(this.log(`ConnectionMonitor reopening stale connection on change. visbilityState = ${AppState.currentState}`),this.connection.reopen())}),200)},this.connection=t,this.log=n}}function now(){return(new Date).getTime()}function secondsSince(t){return null==t?1/0:(now()-t)/1e3}function clamp(t,n,e){return Math.max(n,Math.min(e,t))}ConnectionMonitor.pollInterval={min:3,max:30},ConnectionMonitor.staleThreshold=6,exports.default=ConnectionMonitor;